using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Noggog;
using SkyrimNPCHelpers;
using StringCompareSettings;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace SynAutomaticSpells
{
    public class Program
    {
        public static Lazy<PatcherSettings> Settings = null!;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("PatcherSettings", "settings.json", out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynAutomaticSpells.esp")
                .Run(args);
        }

        public static bool IsDebugNPC = false;
        public static bool IsDebugSpell = false;
        public static bool IsDebugSpellEffect = false;
        public class NPCInfo
        {
            public readonly Dictionary<FormKey, List<IKeywordGetter>> HandEffects = new();
            public readonly Dictionary<Skill, uint> SkillLevels = new();

            internal void AddEquipTypeKeywords(IFormLinkNullableGetter<IEquipTypeGetter> equipSlot, IKeywordGetter keyword)
            {
                if (!HandEffects.ContainsKey(equipSlot.FormKey))
                {
                    HandEffects.Add(equipSlot.FormKey, new() { keyword });
                }
                else
                {
                    HandEffects[equipSlot.FormKey].Add(keyword);
                }
            }
        }

        public class SpellInfo
        {
            public ISpellGetter? Spell;
            public Skill? MainSkill;
            public IMagicEffectGetter? MainEffect;
            public Dictionary<Skill, uint> RequiredSkills = new();
        }

        static IPatcherState<ISkyrimMod, ISkyrimModGetter>? State;
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            State = state;

            SearchAndTryReadASISIni();

            SetAsisAutoSpellsIniValuesToSettings();

            // get spell infos
            Console.WriteLine("Get spells info..");
            var spellInfoList = state.GetSpellInfoList();
            Console.WriteLine("Get npc info..");
            var npcsInfoList = state.GetNPCInfoList();

            Console.WriteLine("Distribute spells to npcs..\n-----------");
            int patchedNpcCount = 0;
            foreach (var npcInfo in npcsInfoList)
            {
                // init debug if enabled
                string npcDebugID = "";
                if (Settings.Value.Debug.IsDebugNpc)
                {
                    IsDebugNPC = false;
                    if (npcInfo.Key.EditorID.HasAnyFromList(Settings.Value.Debug.NpcEDIDListForDebug))
                    {
                        npcDebugID = $"Method:{nameof(RunPatch)}/NPC:{npcInfo.Key.EditorID}";
                        Console.WriteLine($"{npcDebugID} debug begin!");
                        IsDebugNPC = true;
                    }
                }

                if (IsDebugNPC) Console.WriteLine($"{npcDebugID} get spell effects info");
                var spellsToAdd = new List<ISpellGetter>();
                foreach (var spellInfo in spellInfoList)
                {
                    // init debug if enabled
                    string spellDebugID = "";
                    if (Settings.Value.Debug.IsDebugSpell)
                    {
                        IsDebugSpell = false;
                        if (spellInfo.Key.EditorID.HasAnyFromList(Settings.Value.Debug.SpellEDIDListForDebug))
                        {
                            spellDebugID = $"Method:{nameof(Ext.GetSpellInfoList)}/Spell:{nameof(spellInfo.Key.EditorID)}";
                            Console.WriteLine($"{spellDebugID} debug begin!");
                            IsDebugSpell = true;
                        }
                    }

                    if (IsDebugSpell) Console.WriteLine($"{spellDebugID} check if {npcInfo.Key.EditorID} can add the spell");
                    if (!CanGetTheSpell(npcInfo.Value, spellInfo)) continue;
                    if (IsDebugSpell) Console.WriteLine($"{spellDebugID} check if {npcInfo.Key.EditorID} spells already contains the spell");
                    if (npcInfo.Key.ActorEffect!.Contains(spellInfo.Key)) continue;

                    if (IsDebugSpell) Console.WriteLine($"{spellDebugID} add spells in spells list for {npcInfo.Key.EditorID}");
                    spellsToAdd.Add(spellInfo.Key);
                }

                if (IsDebugNPC) Console.WriteLine($"{npcDebugID} check if any spells must added");
                var addedCount = spellsToAdd.Count;
                if (addedCount == 0) continue;

                if (IsDebugNPC) Console.WriteLine($"{npcDebugID} add spells for npc");
                if(!Settings.Value.Debug.IsDebugNpc && !Settings.Value.Debug.IsDebugSpell && !Settings.Value.Debug.IsDebugSpellEffect) Console.WriteLine($"Add {addedCount} spells for '{npcInfo.Key.EditorID}'");
                var npc = state.PatchMod.Npcs.GetOrAddAsOverride(npcInfo.Key);
                foreach (var spellToAdd in spellsToAdd) npc.ActorEffect!.Add(spellToAdd);
                patchedNpcCount++;
            }

            Console.WriteLine($"\n\nPatched {patchedNpcCount} npcs.\n-----------");
        }

        public class ASISSetData
        {
            public string SectionName = "";
            public HashSet<StringCompareSettingGroup> List = new();
            public CompareType StringCompareType;
        }
        private static void SetAsisAutoSpellsIniValuesToSettings()
        {
            Console.WriteLine("Set Asis autospells ini values into settings..");

            List<ASISSetData> AutomaticSpellsIniParamsData = new()
            {
                new ASISSetData(){ SectionName = "NPCInclusions", List = Settings.Value.ASIS.NPCInclusions, StringCompareType = CompareType.StartsWith },
                new ASISSetData(){ SectionName = "NPCExclusions", List = Settings.Value.ASIS.NPCExclusions, StringCompareType = CompareType.Contains },
                new ASISSetData(){ SectionName = "NPCKeywordExclusions", List = Settings.Value.ASIS.NPCKeywordExclusions, StringCompareType = CompareType.StartsWith },
                new ASISSetData(){ SectionName = "NPCModExclusions", List = Settings.Value.ASIS.NPCModExclusions, StringCompareType = CompareType.Equals },
                new ASISSetData(){ SectionName = "spellModInclusions", List = Settings.Value.ASIS.SpellModNInclusions, StringCompareType = CompareType.Equals },
                new ASISSetData(){ SectionName = "SPELLEXCLUSIONSCONTAINS", List = Settings.Value.ASIS.SpellExclusons, StringCompareType = CompareType.Contains },
                new ASISSetData(){ SectionName = "SPELLEXCLUSIONSSTARTSWITH", List = Settings.Value.ASIS.SpellExclusons, StringCompareType = CompareType.StartsWith },
                new ASISSetData(){ SectionName = "EffectKeywordPrefixes", List = Settings.Value.ASIS.EffectKeywordInclusions, StringCompareType = CompareType.StartsWith },
            };

            foreach (var paramData in AutomaticSpellsIniParamsData)
            {
                var list = paramData.List;
                var groupToAdd = new StringCompareSettingGroup() { Comment = nameof(list) };
                HashSet<string> addStrings = new();
                foreach (var v in AutomaticSpellsIniParams![paramData.SectionName])
                {
                    if (addStrings.Contains(v)) continue;

                    addStrings.Add(v);
                    var stringInfo = new StringCompareSetting
                    {
                        Name = v,
                        IgnoreCase = true,
                        Compare = paramData.StringCompareType
                    };

                    groupToAdd.StringsList.Add(stringInfo);
                }
                list.Add(groupToAdd);
            }

            AutomaticSpellsIniParams = null;
        }

        public static Dictionary<string, HashSet<string>>? AutomaticSpellsIniParams = new()
        {
            { "NPCInclusions", new HashSet<string>() },
            { "NPCExclusions", new HashSet<string>() },
            { "SPELLEXCLUSIONSCONTAINS", new HashSet<string>() },
            { "SPELLEXCLUSIONSSTARTSWITH", new HashSet<string>() },
            { "EffectKeywordPrefixes", new HashSet<string>() },
            { "NPCKeywordExclusions", new HashSet<string>() },
            { "NPCModExclusions", new HashSet<string>() },
            { "spellModInclusions", new HashSet<string>() },
        };

        private static void SearchAndTryReadASISIni()
        {
            var iniPath = Path.Combine(State!.DataFolderPath, "SkyProc Patchers", "ASIS", "AutomaticSpells.ini");
            if (!File.Exists(iniPath)) return;

            // read AutomaticSpells ini parameters into settings
            Console.WriteLine("Found ASIS 'AutomaticSpells.ini'. Trying to read..");

            Dictionary<string, HashSet<string>> iniSections = new();
            iniSections.ReadIniSectionValuesFrom(iniPath);

            var keys = new HashSet<string>(AutomaticSpellsIniParams!.Keys);
            int iniValuesCount = 0;
            int iniSectionsCount = 0;
            foreach (var key in keys)
            {
                if (!iniSections.ContainsKey(key)) continue;

                var v = iniSections[key];
                AutomaticSpellsIniParams[key] = v;
                iniValuesCount += v.Count;
                iniSectionsCount++;
            }

            Console.WriteLine($"Added {iniSectionsCount} sections and {iniValuesCount} values from 'AutomaticSpells.ini'");
        }

        private static bool CanGetTheSpell(NPCInfo npcInfo, KeyValuePair<ISpellGetter, SpellInfo> spellInfo)
        {
            if (IsDebugSpell) Console.WriteLine($"{nameof(CanGetTheSpell)} check main effect");
            //if (npcGetter.PlayerSkills == null) return false;
            if (spellInfo.Value.MainEffect == null) return false;
            if (IsDebugSpell) Console.WriteLine($"{nameof(CanGetTheSpell)} check if spell info have any keywords");
            if (spellInfo.Value.MainEffect.Keywords == null) return false;

            if (IsDebugSpell) Console.WriteLine($"{nameof(CanGetTheSpell)} check if npc actor values is more or equal of reuired by spell");
            foreach (var requiredSkillInfo in spellInfo.Value.RequiredSkills)
            {
                if (IsDebugSpell) Console.WriteLine($"{nameof(CanGetTheSpell)} check actor value");
                if (requiredSkillInfo.Value > npcInfo.SkillLevels[requiredSkillInfo.Key]) return false;
                if (IsDebugSpell) Console.WriteLine($"{nameof(CanGetTheSpell)} checked actor value");
                //if (npcGetter.PlayerSkills.SkillValues.First(s => s.Key == requiredSkillInfo.Key).Value < requiredSkillInfo.Value) return false;
            }

            if (IsDebugSpell) Console.WriteLine($"{nameof(CanGetTheSpell)} add valid spell keywords for compare");
            var spellValidKeywords = new List<IKeywordGetter>();
            foreach (var keywordFormLinkGetter in spellInfo.Value.MainEffect!.Keywords)
            {
                if (keywordFormLinkGetter.IsNull) continue;

                if (!keywordFormLinkGetter.TryResolve(State!.LinkCache, out var keyword)) continue;

                var edid = keyword.EditorID;
                if (string.IsNullOrWhiteSpace(edid)) continue;
                if (!keyword.EditorID.HasAnyFromList(Settings.Value.ASIS.EffectKeywordInclusions)) continue;
                spellValidKeywords.Add(keyword);
            }

            if (IsDebugSpell) Console.WriteLine($"{nameof(CanGetTheSpell)} check if any valid spell keywords added");
            if (spellValidKeywords.Count == 0) return false;

            if (IsDebugSpell) Console.WriteLine($"{nameof(CanGetTheSpell)} check if npc hace the equip type ");
            if (!npcInfo.HandEffects.ContainsKey(spellInfo.Key.EquipmentType.FormKey)) return false;

            if (IsDebugSpell) Console.WriteLine($"{nameof(CanGetTheSpell)} set keywords by equip type");
            var npcSpellsEffectsValidKeywords = npcInfo.HandEffects[spellInfo.Key.EquipmentType.FormKey];
            if (npcSpellsEffectsValidKeywords == null) return false;

            if (IsDebugSpell) Console.WriteLine($"{nameof(CanGetTheSpell)} check if spell have any same keyword as npc spells had");
            foreach (var keywordGetter in spellValidKeywords) if (npcSpellsEffectsValidKeywords.Contains(keywordGetter)) return true;

            if (IsDebugSpell) Console.WriteLine($"{nameof(CanGetTheSpell)} no keywords was equal, return false");
            if (IsDebugSpell) Console.WriteLine($"{nameof(spellValidKeywords)}:\n{string.Join("\n", spellValidKeywords.Select(k=>k.EditorID))}\n\n{nameof(npcSpellsEffectsValidKeywords)}:\n{string.Join("\n", npcSpellsEffectsValidKeywords.Select(k=>k.EditorID))}");
            return false;
        }
    }
}
